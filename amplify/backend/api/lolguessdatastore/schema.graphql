# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# FOR TESTING ONLY! test
# , operations: [read]
type User
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  username: String!
    @index(name: "usersByUsername", queryField: "usersByUsername")
  guesses: [Guess] @hasMany
  # Freeplay stats
  score: Float!
  maxScore: Float!
  correctPlacements: Int!
  correctRanks: Int!
  totalRanks: Int!
  unfinished: Int!
  totalGuesses: Int!
  averageCorrectPlacements: Float!
  averageScore: Float!
  # Freeplay occurrences
  scores: [Int] # 1D array of size 100 counting number of score occurrences
  rankGuesses: [[Int]] # 2D 10 x 10 array of rank guesses from iron to challenger
  placementGuesses: [[Int]] # 2D 8 x 8 array of placement guesses from first to eight
  correctPlacementGuesses: [Int] # 1D array of size 18 counting number of times guessed 0, 1, 2, ... placements correctly separated by also correct rank or not
  # Daily stats
  dailyTotalGuesses: Int
  dailyScore: Float
  dailyMaxScore: Float
  dailyCorrectPlacements: Int
  dailyCorrectRanks: Int
  # Daily Low Elo occurrences
  dailyScoresLow: [Int] # size 82
  dailyRankGuessesLow: [[Int]] # size 5 x 5
  dailyPlacementGuessesLow: [[Int]]
  dailyCorrectPlacementGuessesLow: [Int]
  # Daily High Elo occurrences
  dailyScoresHigh: [Int] # size 82
  dailyRankGuessesHigh: [[Int]] # size 5 x 5
  dailyPlacementGuessesHigh: [[Int]]
  dailyCorrectPlacementGuessesHigh: [Int]
  # Daily All Elo occurrences
  dailyScoresAll: [Int] # size 100
  dailyRankGuessesAll: [[Int]] # size 10 x 10
  dailyPlacementGuessesAll: [[Int]]
  dailyCorrectPlacementGuessesAll: [Int]
}

type Guess
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  id: ID!
  placements: [String!]!
  guessedRank: String!
  rank: String!
  ranks: [String!]!
  userGuessesId: ID!
    @index(
      name: "guessesByDate"
      queryField: "guessesByDate"
      sortKeyFields: ["createdAt"]
    )
  createdAt: String!
  region: String
  regions: [String]
  matchId: String
  mode: String # freeplay, daily
}

type Leaderboard
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  byCorrectPlacements: [String]
  byCorrectRanks: [String]
  byScore: [String]
  byAverageCorrectPlacements: [String]
  byAverageScore: [String]
  date: ID! @primaryKey
}

type Daily
  @model
  @auth(
    rules: [
      { allow: public, operations: [read, update] } # TODO: REMOVE WHEN DEPLOY
      { allow: private, operations: [read], provider: iam }
    ]
  ) {
  date: ID! @primaryKey(sortKeyFields: ["category"])
  matchId: String! # riot api match id
  rank: String!
  region: String!
  category: String! # low, high, all
  usernames: [String] # original usernames of players
  patch: String # patch number
  set: Int # set number
  datetimePlayed: AWSTimestamp # game_datetime
  # Unauthorized user stats
  rankGuesses: [Int] # 1D array of rank guesses from iron to challenger
  placementGuesses: [[Int]] # 2D array of placement guesses from first to eight
  perfects: Int # number of perfects
  scores: [Int] # 1D array of size 100 counting scores
  # Authorized user stats
  loggedRankGuesses: [Int]
  loggedPlacementGuesses: [[Int]]
  loggedPerfects: Int
  loggedScores: [Int]
}

type Query {
  batchFetchUser(ids: [ID]): [User]
}
